<h2>Notes on client-side storage</h2>
<p>It seems that the future of software development as well as my employment consists in the latest web frameworks and web APIs. I believe I have mentioned in an older post that web browsers are becoming operating systems. Web standards are expanding and web browser adoption of these standards are increasing at the same rate (at least for the Mozilla and Google based browsers, Apple and Microsoft are slow to adopt web standards and for good reason perhaps; an open web with more powerful web apps threatens the relevancy of their closed and locked down operating systems). Applications consisting of only client-side Javascript, HTML, and CSS are now capable of 3D graphics, persistent filesystem-like storage, and real-time persistent network connections.</p>
<p>The following are the standard ways Javascript can store information locally:</p>
<ul>
	<li>Cookies (<code>document.cookie</code>)</li>
	<li>Web storage (<code>window.localStorage</code> and <code>window.sessionStorage</code>)</li>
	<li>Cache (<code>window.caches</code>)</li>
	<li>IndexedDB (<code>window.indexedDB</code>)</li>
</ul>
<p>I only have experience using web storage, but learning all of them is useful since each has a specific purpose as well as advantages and disadvantages between the others.</p>
<h2>Cookies</h2>
<p>Cookies are the oldest form of client-side storage. Every web server can have 1 cookie associated with it which is just a plain-text string of key-value pairs where the key and the value of a key-value pair are delimited by an equal sign and each key-value pair is delimited by a semicolon. Cookies can be created by both server code and client code, but they are normally created by server code and certain cookies can be disabled from client-side code access. Cookies can persist for as long as the user's browser is open or they can persist for a specific duration or they can persist forever or until the user manually deletes them. Every time a user requests a resource from a web server, the client must send back the content of the cookie it holds, in the body of the request, which the server previously assigned to it (if any). This enables the server to track the user's activity within it's requests to that server, of course this has historically been used maliciously by advertisement servers whose content are embedded on different web sites; cookies have been used to track users website history on any part of the internet that the advertisement is being used on.</p>
<p>Cookies are very limited since they can only store plain text and they have a maximum size of 4 KB. The only thing advantageous about cookies is that they can be accessed from server side code while being stored on the client, but such a feature is only needed by servers that do not have a database or wish to save storage space. I'm under the impression that cookies are not used anymore except for malicious purposes. In addition to security risks, cookies also slow down websites since they are transmitted in the body of every request for web sites that issue cookies. This degrades the performance of both the server and the client.</p> 
<h2>Web storage</h2>
<p>This is a standard Javascript API for storing data in the user's web browser or file system that consists of a collection of plain-text key-value pairs. <code>window.localStorage</code> stores data that lasts forever or until cleared and <code>window.sessionStorage</code> stores data that is unique to the current tab and lasts until that tab is closed. Both localStorage and sessionStorage are unique to the current origin.</p>
<p>Web storage is a general improvement over cookies as they are not transmitted over every web request and their combined storage capacity typically ranges from 10 to 20 MB.</p>
<p>The only downside of web storage compared to the next two types of client-side storage is that accesses to web storage accesses are synchronous only.</p>
<h2>Cache</h2>
<p>The cache has a specific purpose: to store content for future web requests on the client. Two main reasons to have a cache is to enable a web site or web app to continue working in the event that the user is offline and to make a web site's performance faster by caching certain resources that do not update frequently.</p>
<p>The latter reason is especially an attractive reason to use cache to speed up a web site. I can imagine a web app whose URL is always the same and whatever is transferred over HTTP will only consist in content that is always changing and content that describes what other content needs to be fetched for updating, other than that static content should never be transferred which implies that it is very rare if not, unnecessary for the user to ever click the refresh button.</p>
<p>The cache is meant for storing resources, that is, non-user-generated data, that would otherwise be accessed by a browser navigation or with XMLHttpRequest or Fetch. The cache can store both binary and plain text data. Accessing data through the cache happens asynchronously. The capacity of the cache per origin is in the hundreds of megabytes.</p> 
<h2>IndexedDB</h2>
<p>This is a client-side NoSQL database that provides the most sophisticatedly organized, asynchronous, client-side storage through Javascript as well as the largest capacity storage.</p>
<p>IndexedDB stores JSON objects in a particular schema that can be accessed asynchronously through a series of transactions. The storage limits of IndexedDB can potentially be unlimited depending on the browser.</p>
<p>The primary purpose of IndexedDB is for storing large and/or user-generated data for web apps.</p>
<h2>File API</h2>
<p>The File API is another Javascript web API, but it has little to do with with the above 4 standards/APIs but I think it deserves a mention. The File API cannot store anything. The File API basically gives Javascript read-only access to the user's filesystem for files specifically selected by the user. This allows web apps to perform offline work rather than requiring selected files to be uploaded to the server for processing through a POST method.</p>
<h2>Summary</h2>
<p>Never use cookies. Use Web storage for user settings and preferences. Use cache for frequently requested but infrequently updated URL-addressable resources. Use IndexedDB for application state and large user-generated data. Do not use any of these methods to store security sensitive data.</p>
