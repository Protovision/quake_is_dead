<h2>More thoughts on Language Design</h2>
<p>There is an amount of esteem I hold for Ken and Dennis, it is not their scientific or academic knowledge that I regard as impressive at all. It is preceisly their stupidity that I admire, which is hard to acquire or aspire to in an age that holds facts, that is the resignation and surrender to the current state of affairs, in higher regard than the capacity which enables the commanding and creative potential to bloom forth and revolutionize the world. Willful stupidity is more than mere ignorance because even willless ignorance still knows and abides by the basic thinking guidelines established by society's oligarchs. Stupidity is taking things at face value, accepting the reality of the experiences they project out of oneself, and working with them directly: it is precisely not rejecting one's experiences for the sake of the lens of reality set forth by perceived external higher authorities. It is adapting to the environment in regards to how one's ownself turned out.</p>
<p>When I read a short biography of Dennis, I was amazed at the brute honesty and down-to-earth mood he set forth regarding his education from the following:</p>
<figure>
	<blockquote>
		My undergraduate experience convinced me that I was not smart enough to be a physicist, and that computers were quite neat. My graduate school experience convinced me that I was not smart enough to be an expert in the theory of algorithms and also that I liked procedural languages better than functional ones.
	</blockquote>
	- Dennis M. Ritchie
</figure>
<p>Functional programs are safe and correct insofar as they can be proven by a lambda calculus; they also have higher potential for being parallelized. This is a higher level of abstraction from the near one-to-one correspondence between imperative programs and machine code which is closer to modeling and providing an interface to the reality of the machine's execution. Choosing a high-level functional language over a low-level imperative language is the choice between a beautiful lie and an ugly truth.</p>
<p>Any programming language designed by a large corporation will almost always be one designed for large teams of poor, compromising, and competing intellects who cannot be trusted from harming themselves. This is why safety and ignorance is the primary objective of many newer languages. A language designed by one person for his own use will always be a step higher in terms of control, precision, and danger even if there is a slight corruption of mind influenced by these corporate programming languages.</p>
<p>Sadly, many new language designers, specifically for system programming, will easily criticize a language like C++ while praising C for it's merits. They will say C++ is complicated and C is simple but lacking in modern features that they see in other languages. So for their new language, they end up copying C while adding a few syntax sugars here, a few runtime overhead features there, and perhaps a new calling convention that breaks compatability with C: in other words, they end up reinventing a worse C++.</p>
<p>There are many historical mistakes, acknowledged by Dennis himself, that become repeated in newer languages, especially C-like languages. While the stupidity of today's new language designers has it's merits as a catalyst for creation, it has it's faults in an ignorance of history which must be known to achieve a higher level of creativity through the rejection of history's mistakes.</p>
<p>If one wishes to create a C-like language that does not repeat a few major mistakes of C, one can start by reading <a href="https://www.bell-labs.com/usr/dmr/www/chist.html">The Development of the C Language</a>. I for one do not wish to create another C-like language. C-like languages are popular because they use familiar symbols adopted from C, this has nothing to do with any inherent utility that might be present in the syntax. C syntax is incoherent and is a result of unforeseen changes and compromises throughout it's history.</p>
<p>A language's semiotics is a powerful aesthetic force that colonizes the minds that use it. Authentic language creation, tests the aesthetic conventions imposed by earlier languages and their baggage of concepts until they break.</p>
<p>It has been many months of thinking and formalizing a syntax for my new language. The progress is slow because of my constant pressing needs for survival. Thinking is a privilege to those who have necessity at bay. Even more: speaking and being heard is a privilege to those who have thinking and necessity taken care of for them. I often find it a waste of time to speak or write, they fall on ears that either hear nothing or hear nothing but evil.</p>
<p>When finished, my language will be the primary tool for all my future projects. My brutally honest language that is as naturally nihilistic as the machine will be governed by the following rules:</p>
<ul>
	<li>No hidden control flow</li>
	<li>No hidden data allocation</li>
	<li>No hidden data mutation</li>
	<li>No hidden data conversion</li>
</ul>
<p>These principles constitute the primary value of transparency between the human and the machine. Every lexical element of this language will embody the explicit intention of the programmer that must be executed by the machine. There will be nothing of the sort pertaining to hints or requests to the compiler, everything will be a command and the programmer will not be denied what is possible for the sake of the world of correctness, a world which limits great possibilities. I will have designed and implemented this tool for myself and my equals for great horizons and projects of the grand style. The populace and their conjured opinions are not of my concern and they will continue using and creating bad languages born out of stale and inbred concepts.</p>
